#obtaining our data tables
top_three_brands_tbl <- readRDS(file = "top_three_brands_tbl.rds")
#obtaining our data tables
top_three_brands_tbl <- readRDS(file = "top_three_brands_tbl.rds")
#obtaining our data tables
top_three_brands_tbl <- readRDS(file = "top_three_brands_tbl.rds")
```{r, include = FALSE}
source("../R/cleaned_data.R")
#obtaining our data tables
sales_tbl <- readRDS(file = "sales_tbl.rds")
sales_sample_tbl <- readRDS(file = "sales_sample_tbl.rds")
Sidebar {.sidebar}
==============================================
inputPanel("descriptions", "Brand Names:", choices = colnames(descriptions))
inputPanel("sales_tbl", "Brand Names:", choices = colnames(descriptions))
inputPanel("sales_tbl", "Brand Names:", choices = colnames(descriptions))
inputPanel("sales_tbl", "Brand Names:", choices = colnames(descriptions))
## loading libraries
library(tidyverse)
library(plotly)
library(broom)
library(infer)
library(readxl)
library(haven)
## function for sales and price data
input_descriptions <- function(descriptions_path) {
# importing file
descriptions_tbl <- read_excel(descriptions_path) %>%
select(UPC, DESCRIP) %>%
rename(description = DESCRIP) %>%
mutate(description = recode(description, `CINNAMON TOAST CRUNC` = "Cinnamon Toast Crunch", `KIX` = "Kix", `WHEATIES` = "Wheaties"))
}
input_prices <- function(prices_path) {
# importing file
prices_tbl <- read_excel(prices_path) %>%
select(UPC, MOVE, PRICE) %>%
filter(PRICE > 0) %>%
filter(MOVE > 0) %>%
rename(sales = MOVE, price = PRICE)
}
input_locations <- function(locations_path) {
#importing file
locations_tbl <- read_dta(locations_path) %>%
select(city, zip, store) #%>%
filter(!is.na(city)) %>%
filter(!is.na(zip)) %>%
filter(!is.na(store))
}
my_data_store <- input_locations("demo.dta")
setwd("C:/Users/LilaSahar/Repository/templates/Elasticity/data")
my_data_store <- input_locations("demo.dta")
input_locations <- function(locations_path) {
#importing file
locations_tbl <- read_dta(locations_path) %>%
select(city, zip, store) #%>%
filter(!is.na(city)) %>%
filter(!is.na(zip)) %>%
filter(!is.na(store))
}
my_data_store <- input_locations("demo.dta")
locations_tbl <- read_dta(locations_path)
locations_tbl <- read_dta("demo.dta")
View(locations_tbl)
locations_tbl <- read_dta("demo.dta") %>%
select(city, zip, store)
input_locations <- function(locations_path) {
#importing file
locations_tbl <- read_dta("demo.dta") %>%
select(city, zip, store) %>%
filter(!is.na(city)) %>%
filter(!is.na(zip)) %>%
filter(!is.na(store))
}
input_locations <- function(locations_path) {
#importing file
locations_tbl <- read_dta(locations_path) %>%
select(city, zip, store) %>%
filter(!is.na(city)) %>%
filter(!is.na(zip)) %>%
filter(!is.na(store))
}
my_data_store <- input_locations("demo.dta")
View(my_data_store)
locations_tbl <- input_locations(locations_path)
input_locations <- function(locations_path) {
#importing file
locations_tbl <- read_dta(locations_path) %>%
select(city, zip, store) %>%
filter(!is.na(city)) %>%
filter(!is.na(zip)) %>%
filter(!is.na(store))
}
my_data_store <- input_locations("demo.dta")
View(my_data_store)
input_locations <- function(locations_path) {
#importing file
locations_tbl <- read_dta(locations_path) %>%
select(city, zip, store) %>%
filter(city != 0) %>%
filter(!is.na(zip)) %>%
filter(!is.na(store))
}
my_data_store <- input_locations("demo.dta")
View(my_data_store)
input_locations <- function(locations_path) {
#importing file
locations_tbl <- read_dta(locations_path) %>%
select(city, zip, store) %>%
filter(city != " ") %>%
filter(!is.na(zip)) %>%
filter(!is.na(store))
}
my_data_store <- input_locations("demo.dta")
View(my_data_store)
input_locations <- function(locations_path) {
#importing file
locations_tbl <- read_dta(locations_path) %>%
select(city, zip, store) %>%
filter(city != " ") %>%
filter(!is.na(zip)) %>%
filter(!is.na(store))
}
my_data_store <- input_locations("demo.dta")
View(my_data_store)
input_locations <- function(locations_path) {
#importing file
locations_tbl <- read_dta(locations_path) %>%
select(city, zip, store) %>%
filter(city != " ") %>%
filter(!is.na(zip)) %>%
filter(!is.na(store))
}
my_data_store <- input_locations("demo.dta", na.strings = c("", "NA"))
input_locations <- function(locations_path, na.strings = NULL) {
#importing file
locations_tbl <- read_dta(locations_path) %>%
select(city, zip, store) %>%
filter(!is.na(city)) %>%
filter(!is.na(zip)) %>%
filter(!is.na(store))
}
my_data_store <- input_locations("demo.dta", na.strings = c("", "NA"))
View(my_data_store)
input_locations <- function(locations_path, na.strings = NULL) {
#importing file
locations_tbl <- read_dta(locations_path) %>%
select(city, zip, store) %>%
filter(!is.na(city)) %>%
filter(!is.na(zip)) %>%
filter(!is.na(store))
}
my_data_store <- input_locations("demo.dta", na.strings = c("", "NA"))
View(my_data_store)
input_locations <- function(locations_path, na.strings = NULL) {
#importing file
locations_tbl <- read_dta(locations_path) %>%
select(city, zip, store) %>%
filter(na.omit(city)) %>%
filter(!is.na(zip)) %>%
filter(!is.na(store))
}
my_data_store <- input_locations("demo.dta", na.strings = c("", "NA"))
input_locations <- function(locations_path, na.strings = NULL) {
#importing file
locations_tbl <- read_dta(locations_path) %>%
select(city, zip, store) %>%
filter(!is.na(city)) %>%
filter(!is.na(zip)) %>%
filter(!is.na(store))
}
my_data_store <- input_locations("demo.dta", na.strings = c("", "NA"))
View(my_data_store)
input_locations <- function(locations_path, na.strings = NULL) {
#importing file
locations_tbl <- read_dta(locations_path) %>%
select(city, zip, store) %>%
filter(city, na.rm = TRUE) %>%
filter(!is.na(zip)) %>%
filter(!is.na(store))
}
my_data_store <- input_locations("demo.dta", na.strings = c("", "NA"))
input_locations <- function(locations_path, na.strings = NULL) {
#importing file
locations_tbl <- read_dta(locations_path) %>%
select(city, zip, store) %>%
filter(city != NA) %>%
filter(!is.na(zip)) %>%
filter(!is.na(store))
}
my_data_store <- input_locations("demo.dta", na.strings = c("", "NA"))
View(my_data_store)
input_locations <- function(locations_path, na.strings = NULL) {
#importing file
locations_tbl <- read_dta(locations_path) %>%
select(city, zip, store) %>%
filter(city != "") %>%
filter(!is.na(zip)) %>%
filter(!is.na(store))
}
my_data_store <- input_locations("demo.dta", na.strings = c("", "NA"))
View(my_data_store)
input_locations <- function(locations_path, na.strings = NULL) {
#importing file
locations_tbl <- read_dta(locations_path) %>%
select(city, zip, store) %>%
filter(city != "") %>%
filter(!is.na(zip)) %>%
filter(!is.na(store))
}
input_locations <- function(locations_path) {
#importing file
locations_tbl <- read_dta(locations_path) %>%
select(city, zip, store) %>%
filter(city != "") %>%
filter(!is.na(zip)) %>%
filter(!is.na(store))
}
my_data_store <- input_locations("demo.dta")
View(my_data_store)
locations_path <- "demo.dta"
locations_tbl <- input_locations(locations_path)
input_locations <- function(locations_path) {
#importing file
locations_tbl <- read_dta(locations_path) %>%
select(city, zip, store) %>%
filter(city != "") %>%
filter(!is.na(zip)) %>%
filter(!is.na(store))
}
input_store_locations <- function(store_locations_path) {
#importing file
locations_tbl <- read_dta(store_locations_path) %>%
select(city, zip, store) %>%
filter(city != "") %>%
filter(!is.na(zip)) %>%
filter(!is.na(store))
}
store_locations_tbl <- input_locations(store_locations_path)
store_locations_path <- "demo.dta"
store_locations_tbl <- input_locations(store_locations_path)
input_store_locations <- function(store_locations_path) {
#importing file
locations_tbl <- read_dta(store_locations_path) %>%
select(city, zip, store) %>%
filter(city != "") %>%
filter(!is.na(zip)) %>%
filter(!is.na(store))
}
View(store_locations_tbl)
input_us_locations(uszips)
input_us_locations <- function(us_locations_path) {
#importing file
us_locations_tbl <- read_excel(us_locations_path)
input_us_locations(uszips)
us_locations_tbl <- input_us_locations(uszips)
input_us_locations <- function(us_locations_path) {
#importing file
us_locations_tbl <- read_excel(us_locations_path)
us_locations_tbl <- input_us_locations(uszips)
input_us_locations <- function(us_locations_path) {
#importing file
us_locations_tbl <- read_excel(us_locations_path) %>%
select(zip, city, state_name)
}
us_locations_tbl <- input_us_locations(uszips)
us_locations_tbl <- input_us_locations(uszips)
us_locations_tbl <- input_us_locations(uszips.xlsx)
input_us_locations <- function(us_locations_path) {
#importing file
us_locations_tbl <- read_excel(us_locations_path) %>%
select(zip, city, state_name)
}
us_locations_tbl <- input_us_locations(uszips.xlsx)
us_locations_path <- "uszips.xlsx"
us_locations_tbl <- input_us_locations(us_locations_path)
input_us_locations <- function(us_locations_path) {
#importing file
us_locations_tbl <- read_excel(us_locations_path) %>%
select(zip, city, state_name)
}
us_locations_path <- "uszips.xlsx"
us_locations_tbl <- input_us_locations(us_locations_path)
input_us_locations <- function(us_locations_path) {
#importing file
us_locations_tbl <- read_excel(us_locations_path) %>%
select(zip, city, state_name)
}
us_locations_path <- "uszips.xlsx"
us_locations_tbl <- input_us_locations(us_locations_path)
input_us_locations <- function(us_locations_path) {
#importing file
us_locations_tbl <- read_excel(us_locations_path) %>%
select(zip, city, state_name)
}
us_locations_path <- "uszips.xlsx"
us_locations_tbl <- input_us_locations(us_locations_path)
## loading libraries
library(tidyverse)
library(plotly)
library(broom)
library(infer)
library(readxl)
library(haven)
us_locations_path <- "uszips.xlsx"
input_us_locations <- function(us_locations_path) {
#importing file
us_locations_tbl <- read_excel(us_locations_path) %>%
select(zip, city, state_name)
}
us_locations_tbl <- input_us_locations(us_locations_path)
setwd("C:/Users/LilaSahar/Repository/templates/Elasticity/data")
input_us_locations <- function(us_locations_path) {
#importing file
us_locations_tbl <- read_excel(us_locations_path) %>%
select(zip, city, state_name)
}
us_locations_path <- "uszips.xlsx"
us_locations_tbl <- input_us_locations(us_locations_path)
get_top_three <- function(descriptions_tbl, prices_tbl) {
# filtering for non-negatives and counting rows by UPCS
top_three_brands_tbl <- prices_tbl %>%
inner_join(descriptions_tbl) %>%
group_by(description) %>%
summarize(total_count = n()) %>%
filter(total_count > 1000) %>%
slice_max(total_count, n = 3)
}
## function for sales and price and store location data
input_descriptions <- function(descriptions_path) {
# importing file
descriptions_tbl <- read_excel(descriptions_path) %>%
select(UPC, DESCRIP) %>%
rename(description = DESCRIP) %>%
mutate(description = recode(description, `CINNAMON TOAST CRUNC` = "Cinnamon Toast Crunch", `KIX` = "Kix", `WHEATIES` = "Wheaties"))
}
input_prices <- function(prices_path) {
# importing file
prices_tbl <- read_excel(prices_path) %>%
select(UPC, MOVE, PRICE) %>%
filter(PRICE > 0) %>%
filter(MOVE > 0) %>%
rename(sales = MOVE, price = PRICE)
}
input_store_locations <- function(store_locations_path) {
#importing file
store_locations_tbl <- read_dta(store_locations_path) %>%
select(city, zip, store) %>%
filter(city != "") %>%
filter(!is.na(zip)) %>%
filter(!is.na(store))
}
input_us_locations <- function(us_locations_path) {
#importing file
us_locations_tbl <- read_excel(us_locations_path) %>%
select(zip, city, state_name)
}
us_locations_path <- "uszips.xlsx"
us_locations_tbl <- input_us_locations(us_locations_path)
get_top_three <- function(descriptions_tbl, prices_tbl) {
# filtering for non-negatives and counting rows by UPCS
top_three_brands_tbl <- prices_tbl %>%
inner_join(descriptions_tbl) %>%
group_by(description) %>%
summarize(total_count = n()) %>%
filter(total_count > 1000) %>%
slice_max(total_count, n = 3)
}
get_sales <- function(descriptions_tbl, prices_tbl, top_three_brands_tbl) {
# filtering to top three brands
sales_tbl <- prices_tbl %>%
inner_join(descriptions_tbl) %>%
inner_join(top_three_brands_tbl) %>%
select(sales, price, description)
}
get_sales_sample <- function(sales_tbl){
#selecting a sample from each brand
sales_sample_tbl <- sales_tbl %>%
group_by(description) %>%
sample_n(1000)
}
plot_boxplot_sales <- function(sales_tbl, x_title, y_title, title_chart) {
#graphing a box plot
p <- ggplot(data = sales_tbl, aes(x = description, y = log(sales), color = description)) +
geom_boxplot() +
labs(x = x_title, y = y_title, title = title_chart, caption = "The y-values are transformed on a log scale.") +
theme(plot.title = element_text(hjust = .5, face = "bold"), plot.caption = element_text(hjust = .5)) +
coord_flip()
hide_legend(ggplotly(p))
}
plot_boxplot_price <- function(sales_tbl, x_title, y_title, title_chart) {
#graphing a box plot
p <- ggplot(data = sales_tbl, aes(x = description, y = log(price), color = description)) +
geom_boxplot() +
labs(x = x_title, y = y_title, title = title_chart, caption = "The y-values are transformed on a log scale.") +
theme(plot.title = element_text(hjust = .5, face = "bold"), plot.caption = element_text(hjust = .5)) +
coord_flip()
hide_legend(ggplotly(p))
}
plot_histogram_sales <- function(sales_tbl, x_title, title_chart){
#graphing a histogram for sales
p <- ggplot(data = sales_tbl, aes(x = log(sales), fill = description)) +
geom_density(adjust = 5, aes(x = log(sales), fill = description), alpha = .8) +
labs(x = x_title, y = "Density", title = title_chart, caption = "The x-values are transformed on a log scale.") +
scale_fill_discrete(name = "Brand Names") +
theme(plot.title = element_text(hjust = .5), legend.title = element_text(face = "bold"), plot.caption = element_text(hjust = .5))
ggplotly(p)
}
plot_histogram_price <- function(sales_tbl, x_title, title_chart){
#graphing a histogram for price
p <- ggplot(data = sales_tbl, aes(x = log(price))) +
geom_density(adjust = 5, aes(fill = description), alpha = .8) +
xlim(0, 2) +
labs(x = x_title, y = "Density", title = title_chart, caption = "The x-values are transformed on a log scale.") +
scale_fill_discrete(name = "Brand Names") +
theme(plot.title = element_text(hjust = .5, face = "bold"), legend.title = element_text(face = "bold"), plot.caption = element_text(hjust = .5))
ggplotly(p)
}
plot_scatter <- function(sales_sample_tbl, model = "none"){
if (model == "RI") {
mod <- glm(log(sales) ~ log(price) + description, data = sales_sample_tbl)
p <- ggplot(data = cbind(sales_sample_tbl, pred = predict(mod)), aes(x = log(price), y = log(sales))) +
geom_point(col = "gray", alpha = .8) +
geom_line(aes(y = pred, color = description), size = 1) +
xlim(0, 1.75) +
labs(x = "Price of Cereal Box", y = "Number of Cereal Boxes Sold",
title = "Price vs. Box Sales", fill = "Brand Names", caption = "The x and y values
are transformed on a log scale.") +
theme(legend.position = "None", plot.title = element_text(hjust = .5, face = "bold"), legend.title = element_text(face = "bold"), plot.caption = element_text(hjust = .5))
ggplotly(p)
}
else if (model == "RIRS") {
mod <- glm(log(sales) ~ log(price) * description, data = sales_sample_tbl)
p <- ggplot(data = cbind(sales_sample_tbl, pred = predict(mod)), aes(x = log(price), y = log(sales))) +
geom_point(col = "gray", alpha = .8) +
geom_line(aes(y = pred, color = description), size = 1) +
xlim(0, 1.75) +
labs(x = "Price of Cereal Box", y = "Number of Cereal Boxes Sold",
title = "Price vs. Box Sales", fill = "Brand Names", caption = "The x and y values
are transformed on a log scale.") +
theme(legend.position = "None", plot.title = element_text(hjust = .5, face = "bold"), legend.title = element_text(face = "bold"), plot.caption = element_text(hjust = .5))
ggplotly(p)
}
else {
p <- ggplot(data = sales_sample_tbl, aes(x = log(price), y = log(sales))) +
geom_point(aes(color = description), alpha = .8) +
xlim(0, 1.75) +
labs(x = "Price of Cereal Box", y = "Number of Cereal Boxes Sold",
title = "Price vs. Box Sales", fill = "Brand Names", caption = "The x and y values
are transformed on a log scale.") +
theme(legend.position = "None", plot.title = element_text(hjust = .5, face = "bold"), legend.title = element_text(face = "bold"), plot.caption = element_text(hjust = .5))
ggplotly(p)
}
}
plot_fitted_vs_residual <- function(sales_sample_tbl, model = "none", method = "ML") {
if (model == "REM") {
lmfit <- lm(log(sales) ~ log(price) + description, data = sales_sample_tbl)
p <- ggplot(sales_sample_tbl, aes(lmfit$fitted.values, lmfit$residuals)) +
geom_point() +
geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
labs(title = "Fitted vs Residuals", x = "Residuals", y = "Fitted Values") +
theme(plot.title = element_text(hjust = .5, face = "bold"))
ggplotly(p)
}
else if (model == "MEM") {
lmfit <- lm(log(sales) ~ log(price) * description, data = sales_sample_tbl)
p <- ggplot(sales_sample_tbl, aes(lmfit$fitted.values, lmfit$residuals)) +
geom_point() +
geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
labs(title = "Fitted vs Residuals", x = "Residuals", y = "Fitted Values") +
theme(plot.title = element_text(hjust = .5, face = "bold"))
ggplotly(p)
}
}
get_bootstrap <- function(sales_tbl) {
# obtain betas for bootstrap
bootstrap_tbl <- sales_tbl %>%
mutate(sales = log(sales), price = log(price)) %>%
specify(formula = sales ~ price + description) %>%
generate(reps = 1000, type = "bootstrap") %>%
fit()
saveRDS(object = bootstrap_tbl, file = "bootstrap_tbl.rds")
}
# obtain confidence interval for bootstrap
get_ci_for_bootstrap <- function(bootstrap_tbl) {
ci <- bootstrap_tbl %>%
group_by(term) %>%
nest() %>%
mutate(perc_ci = map(
data,
get_confidence_interval,
level = 0.95,
type = "percentile"
)) %>%
unnest(perc_ci)
}
plot_bootstrap <- function(bootstrap_tbl) {
p <- ggplot(bootstrap_tbl %>% filter(term == "price") %>% select(replicate, estimate), aes(estimate)) +
geom_density() +
geom_vline(xintercept = ci %>% filter(term == "price") %>% pull(lower_ci), linetype = "dotted", color = "red") +
geom_vline(xintercept = ci %>% filter(term == "price") %>% pull(upper_ci), linetype = "dotted", color = "red") +
labs(title = "Bootstrap of Means", x = "Estimates of Beta", y = "Count") +
theme(plot.title = element_text(hjust = .5, face = "bold"))
ggplotly(p)
}
# # Testing Functions ----
# # Testing Functions ----
# ## setting file paths
descriptions_path <- "raw_data_cereal_descriptions.xlsx"
prices_path <- "raw_data_cereal_prices.xlsx"
source("~/.active-rstudio-document", echo=TRUE)
knitr::opts_chunk$set(echo = TRUE)
getwd()
